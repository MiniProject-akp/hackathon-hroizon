chat.html  
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Room for {{ event.name }}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Chat Room for {{ event.name }}</h1>
    <div id="chat-box">
        <ul id="messages"></ul>
    </div>
    <input id="message" autocomplete="off" /><button id="send">Send</button>
    <script>
        var socket = io();
        var room = "{{ event.id }}";
        var username = prompt("Enter your name");

        socket.emit('join', {username: username, room: room});

        socket.on('message', function(msg){
            $('#messages').append($('<li>').text(msg));
        });

        $('#send').click(function(){
            socket.emit('message', {message: $('#message').val(), room: room});
            $('#message').val('');
        });
    </script>
</body>
</html>

event_detail.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ event.name }} Details</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <header>
        <div class="top-left-button">
            <a href="{{ url_for('index') }}" class="btn">Back to Events</a>
        </div>
        <div class="top-right-button">
            <a href="{{ url_for('chat', event_id=event.id) }}" class="btn">Go to Chat Room</a>
        </div>
    </header>
    <div class="event-details-container">
        <div class="event-details-box">
            <h1>{{ event.name }}</h1>
            <p><strong>Address:</strong> {{ event.address }}</p>
            <p><strong>Time:</strong> {{ event.time }}</p>
            <p><strong>Domain:</strong> {{ event.domain }}</p>
        </div>
        <div class="registrations-box">
            <h2>Registrations</h2>
            <table class="registrations-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>College Name</th>
                    </tr>
                </thead>
                <tbody>
                    {% for registration in registrations %}
                    <tr>
                        <td>{{ registration.name }}</td>
                        <td>{{ registration.college_name if registration.college_name else 'N/A' }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>

index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event List</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
    <link href="https://fonts.googleapis.com/css2?family=Merriweather:wght@400;700&display=swap" rel="stylesheet">
</head>
<body>
    <header>
        <h1 class="event-nest-heading">EVENT-NEST</h1>
        <div class="top-right-buttons">
            <a href="{{ url_for('post_event') }}" class="btn">Post a New Event</a>
            <a href="{{ url_for('post_event') }}" class="btn">Sign Up</a>
        </div>
    </header>
    <main>
        <h2>  </h2>
        <div class="event-container">
            {% for event in events %}
            <div class="event-card">
                <h2>{{ event.name }}</h2>
                <p><strong>Address:</strong> {{ event.address }}</p>
                <p><strong>Time:</strong> {{ event.time }}</p>
                <p><strong>Domain:</strong> {{ event.domain }}</p>
                <p><strong>Date:</strong> {{ event.date }}</p>
                <a href="{{ url_for('register', event_id=event.id) }}" class="btn">Register</a>
                <a href="{{ url_for('event_detail', event_id=event.id) }}" class="btn">Go to Event</a>
            </div>
            {% endfor %}
        </div>
    </main>
</body>
</html>

post_event.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Post Event</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <div class="form-container">
            <h1>Create Event</h1>
            <p>Fill out the form to post your event.</p>
            <form method="POST">
                <div class="form-group">
                    <label for="name">Event Name</label>
                    <input type="text" id="name" name="name" placeholder="Enter event name" required>
                </div>
                <div class="form-group">
                    <label for="address">Address</label>
                    <input type="text" id="address" name="address" placeholder="Enter event address" required>
                </div>
                <div class="form-group-inline">
                    <label for="date">Date</label>
                    <input type="text" id="date" name="date" placeholder="dd-mm-yyyy" required>
                </div>
                <div class="form-group-inline">
                    <label for="time">Time</label>
                    <input type="text" id="time" name="time" placeholder="--:--" required>
                </div>
                <div class="form-group">
                    <label for="phone">Coordinator Phone</label>
                    <input type="text" id="phone" name="phone" placeholder="Enter coordinator phone" required>
                </div>
                <div class="form-group">
                    <label for="domain">Domain</label>
                    <input type="text" id="domain" name="domain" placeholder="Enter event domain" required>
                </div>
                <button type="submit" class="register-btn">Post Event</button>
            </form>
        </div>
    </div>
</body>
</html>

register.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Event Registration</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
</head>
<body>
    <div class="container">
        <div class="form-container">
            <h1>Event Registration</h1>
            <p>Fill out the form below to register for the event.</p>
            <form method="POST">
                <div class="form-group">
                    <label for="name">Name:</label>
                    <input type="text" id="name" name="name" required placeholder="Enter your name">
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number:</label>
                    <input type="text" id="phone" name="phone" required placeholder="Enter your phone number">
                </div>
                <div class="form-group">
                    <label for="college_name">College Name:</label>
                    <input type="text" id="college_name" name="college_name" required placeholder="Enter your college name">
                </div>
                <div class="form-group-inline-container">
                    <div class="form-group-inline">
                        <label for="branch">Branch:</label>
                        <input type="text" id="branch" name="branch" required placeholder="Enter your branch">
                    </div>
                    <div class="form-group-inline">
                        <label for="year">Year:</label>
                        <input type="text" id="year" name="year" required placeholder="Enter your year">
                    </div>
                </div>
                <button type="submit" class="register-btn">Register</button>
            </form>
        </div>
    </div>
</body>
</html>

styles.css 
/* Existing styles */
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
  background-color: #121212;
  color: #e0e0e0;
}

h1.event-nest-heading {
  font-family: 'Merriweather', serif;
  color: #ffffff;
  font-size: 36px;
  font-weight: 700;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}

header {
  position: relative;
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 50px;
}

.top-right-buttons {
  display: flex;
  gap: 10px;
  position: absolute;
  right: 20px;
  top: 20px;
}

.top-right-buttons .btn {
  padding: 10px 20px;
  background-color: #bb86fc;
  border: none;
  border-radius: 5px;
  color: #ffffff;
  text-decoration: none;
  cursor: pointer;
}

.top-right-buttons .btn:hover {
  background-color: #985eff;
}

a {
  text-decoration: none;
  color: #bb86fc;
  display: inline-block;
  margin: 20px 0;
}

.event-details-container {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
}

.event-details-box, .registrations-box {
  background-color: #1e1e1e;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  border-radius: 10px;
  padding: 20px;
  margin-bottom: 20px;
  width: 80%;
  max-width: 800px;
}

.registrations-table {
  width: 100%;
  border-collapse: collapse;
  margin-top: 20px;
}

.registrations-table th, .registrations-table td {
  border: 1px solid #333;
  padding: 10px;
  text-align: left;
}

.registrations-table th {
  background-color: #2a2a2a;
  color: #ffffff;
}

.registrations-table tbody tr:nth-child(even) {
  background-color: #2a2a2a;
}

form {
  width: 300px;
  margin: 50px auto;
  padding: 20px;
  background-color: #1e1e1e;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

label {
  display: block;
  margin-bottom: 10px;
  color: #ffffff;
}

input[type="text"],
button {
  width: 100%;
  padding: 10px;
  margin-bottom: 20px;
  border: 1px solid #333;
  border-radius: 5px;
  background-color: #2a2a2a;
  color: #ffffff;
}

button {
  background-color: #bb86fc;
  border: none;
  cursor: pointer;
}

button:hover {
  background-color: #985eff;
}

.event-container {
  display: flex;
  flex-wrap: wrap;
  justify-content: left;
  padding: 20px;
}

/* Event Card */
.event-card {
  background-color: #1e1e1e;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
  border-radius: 5px;
  width: 300px;
  margin: 20px;
  padding: 20px;
  text-align: left;
  color: #e0e0e0;
  transition: transform 0.2s, box-shadow 0.2s;
}

.event-card:hover {
  transform: translateY(-3px);
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.7);
}

.event-card h2 {
  margin-top: 0;
  color: #ffffff;
}

.event-card p {
  margin: 10px 0;
}

.event-card .date-time {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin: 10px 0;
}

.btn {
  padding: 0.8em 1.0em;
  border: 2px solid #764aac;
  position: relative;
  overflow: hidden;
  background-color: transparent;
  text-align: center;
  text-transform: uppercase;
  font-size: 16px;
  transition: 0.3s;
  z-index: 1;
  font-family: inherit;
  color: #a165d2;
}

.btn::before {
  content: '';
  width: 0;
  height: 300%;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%) rotate(45deg);
  background: #945bd2;
  transition: 0.5s ease;
  display: block;
  z-index: -1;
}

.btn:hover::before {
  width: 105%;
}

.btn:hover {
  color: #111;
}


#chat-box {
  width: 100%;
  max-width: 600px;
  margin: 50px auto;
  padding: 20px;
  background-color: #1e1e1e;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
}

#messages {
  list-style-type: none;
  padding: 0;
  color: #ffffff;
}

#messages li {
  padding: 10px;
  border-bottom: 1px solid #333;
}

input#message {
  width: calc(100% - 60px);
  padding: 10px;
  margin-right: 10px;
  border: 1px solid #333;
  border-radius: 5px;
  background-color: #2a2a2a;
  color: #ffffff;
}

button#send {
  padding: 10px 20px;
  background-color: #bb86fc;
  color: #ffffff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button#send:hover {
  background-color: #985eff;
}

.container {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.form-container {
  background-color: #1f1f1f;
  padding: 30px;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  width: 100%;
  max-width: 400px;
}

.form-container h1 {
  font-size: 24px;
  margin-bottom: 10px;
}

.form-container p {
  font-size: 14px;
  margin-bottom: 20px;
}

.form-group {
  margin-bottom: 20px;
}

.form-group-inline {
  display: inline-block;
  width: calc(50% - 10px);
  vertical-align: top;
}

.form-group-inline + .form-group-inline {
  margin-left: 15px;
}

.form-group label {
  display: block;
  font-size: 14px;
  margin-bottom: 5px;
}

.form-group input,
.form-group-inline input {
  width: 100%;
  padding: 10px;
  border: 1px solid #333;
  border-radius: 5px;
  background-color: #2a2a2a;
  color: #fff;
  font-size: 14px;
  box-sizing: border-box;
}

.register-btn {
  position: relative;
  padding: 10px 20px;
  border-radius: 7px;
  border: 1px solid rgb(61, 106, 255);
  font-size: 14px;
  text-transform: uppercase;
  font-weight: 600;
  letter-spacing: 2px;
  background: transparent;
  color: #fff;
  overflow: hidden;
  box-shadow: 0 0 0 0 transparent;
  transition: all 0.2s ease-in;
}

.register-btn:hover {
  background: rgb(61, 106, 255);
  box-shadow: 0 0 30px 5px rgba(0, 142, 236, 0.815);
  transition: all 0.2s ease-out;
}

.register-btn:hover::before {
  animation: sh02 0.5s 0s linear;
}

.register-btn::before {
  content: '';
  display: block;
  width: 0px;
  height: 86%;
  position: absolute;
  top: 7%;
  left: 0%;
  opacity: 0;
  background: #fff;
  box-shadow: 0 0 50px 30px #fff;
  transform: skewX(-20deg);
}

@keyframes sh02 {
  from {
    opacity: 0;
    left: 0%;
  }

  50% {
    opacity: 1;
  }

  to {
    opacity: 0;
    left: 100%;
  }
}

.register-btn:active {
  box-shadow: 0 0 0 0 transparent;
  transition: box-shadow 0.2s ease-in;
}


/* Updated button styles */
button {
position: relative;
padding: 10px 20px;
border: none;
background: #333;
color: #fff;
font-size: 16px;
font-weight: 600;
text-transform: uppercase;
overflow: hidden;
transition: 0.5s;
z-index: 1;
}

button:hover {
background: #000;
cursor: pointer;
}

button span {
position: absolute;
display: block;
}

button span:nth-child(1) {
top: 0;
left: -100%;
width: 100%;
height: 3px;
background: linear-gradient(90deg, transparent, #ff0057);
animation: animate1 1s linear infinite;
}

@keyframes animate1 {
0% {
  left: -100%;
}
50%,100% {
  left: 100%;
}
}

button span:nth-child(2) {
top: -100%;
right: 0;
width: 3px;
height: 100%;
background: linear-gradient(180deg, transparent, #ff0057);
animation: animate2 1s linear infinite;
animation-delay: 0.25s;
}

@keyframes animate2 {
0% {
  top: -100%;
}
50%,100% {
  top: 100%;
}
}

button span:nth-child(3) {
bottom: 0;
right: -100%;
width: 100%;
height: 3px;
background: linear-gradient(270deg, transparent, #ff0057);
animation: animate3 1s linear infinite;
animation-delay: 0.5s;
}

@keyframes animate3 {
0% {
  right: -100%;
}
50%,100% {
  right: 100%;
}
}

button span:nth-child(4) {
bottom: -100%;
left: 0;
width: 3px;
height: 100%;
background: linear-gradient(360deg, transparent, #ff0057);
animation: animate4 1s linear infinite;
animation-delay: 0.75s;
}

@keyframes animate4 {
0% {
  bottom: -100%;
}
50%,100% {
  bottom: 100%;
}
}

app.py
from flask import Flask, render_template, request, redirect, url_for, session
from flask_sqlalchemy import SQLAlchemy
from flask_socketio import SocketIO, join_room, leave_room, send

app = Flask(__name__)
app.config['SECRET_KEY'] = 'secret!'
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+mysqlconnector://root:yes@localhost/event'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
socketio = SocketIO(app)

class Event(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    address = db.Column(db.String(200), nullable=False)
    date = db.Column(db.String(10), nullable=False)
    time = db.Column(db.String(50), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    domain = db.Column(db.String(100), nullable=False)
    registrations = db.relationship('Registration', backref='event', lazy=True)

class Registration(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    event_id = db.Column(db.Integer, db.ForeignKey('event.id'), nullable=False)
    name = db.Column(db.String(100), nullable=False)
    phone = db.Column(db.String(20), nullable=False)
    team_members = db.Column(db.String(500), nullable=True)
    college_name = db.Column(db.String(100), nullable=False)
    branch = db.Column(db.String(50), nullable=False)
    year = db.Column(db.String(20), nullable=False)

@app.route('/')
def index():
    events = Event.query.all()
    return render_template('index.html', events=events)

@app.route('/post_event', methods=['GET', 'POST'])
def post_event():
    if request.method == 'POST':
        name = request.form['name']
        address = request.form['address']
        date = request.form['date']
        time = request.form['time']
        phone = request.form['phone']
        domain = request.form['domain']
        new_event = Event(name=name, address=address, date=date, time=time, phone=phone, domain=domain)
        db.session.add(new_event)
        try:
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            return str(e), 500
        return redirect(url_for('index'))
    return render_template('post_event.html')

@app.route('/register/<int:event_id>', methods=['GET', 'POST'])
def register(event_id):
    event = Event.query.get(event_id)
    if not event:
        return "Event not found", 404
    
    if request.method == 'POST':
        name = request.form['name']
        phone = request.form['phone']
        team_members = request.form.get('team_members', '')  # Use .get to handle the case when the field is not provided
        college_name = request.form['college_name']
        branch = request.form['branch']
        year = request.form['year']
        new_registration = Registration(event_id=event_id, name=name, phone=phone, team_members=team_members,
                                        college_name=college_name, branch=branch, year=year)
        db.session.add(new_registration)
        try:
            db.session.commit()
        except Exception as e:
            db.session.rollback()
            return str(e), 500
        return redirect(url_for('event_detail', event_id=event_id))
    return render_template('register.html', event_id=event_id)

@app.route('/event/<int:event_id>')
def event_detail(event_id):
    event = Event.query.get_or_404(event_id)
    registrations = Registration.query.filter_by(event_id=event_id).all()
    return render_template('event_detail.html', event=event, registrations=registrations)

@app.route('/chat/<int:event_id>')
def chat(event_id):
    event = Event.query.get_or_404(event_id)
    registrations = Registration.query.filter_by(event_id=event_id).all()
    return render_template('chat.html', event=event, registrations=registrations)

@socketio.on('join')
def handle_join(data):
    username = data['username']
    room = data['room']
    join_room(room)
    send(f'{username} has joined the room.', room=room)

@socketio.on('message')
def handle_message(data):
    send(data['message'], room=data['room'])

if __name__ == '__main__':
    with app.app_context():
        db.create_all()
    socketio.run(app, debug=True)

<<<<<<< HEAD
fields arent same ?okay still vho connect toh hona chaiye na ?
=======
sql query 
USE mysql;

-- Ensure the correct user is set up with privileges
SELECT user, host, authentication_string FROM mysql.user WHERE user='Root' AND host='localhost';

-- Create or ensure the 'Root' user exists and has the correct privileges
CREATE USER IF NOT EXISTS 'Root'@'localhost' IDENTIFIED BY 'yes';
GRANT ALL PRIVILEGES ON event.* TO 'Root'@'localhost';
FLUSH PRIVILEGES;

USE event;

-- Display existing tables
SHOW TABLES;

-- Drop foreign key to modify the `registration` table
ALTER TABLE registration DROP FOREIGN KEY registration_ibfk_1;

-- Drop and recreate the `event` table
DROP TABLE IF EXISTS event;
CREATE TABLE event (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    address VARCHAR(200) NOT NULL,
    date VARCHAR(10) NOT NULL,
    time VARCHAR(50) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    domain VARCHAR(100) NOT NULL
);

-- Drop and recreate the `registration` table
DROP TABLE IF EXISTS registration;
CREATE TABLE registration (
    id INT AUTO_INCREMENT PRIMARY KEY,
    event_id INT NOT NULL,
    name VARCHAR(100) NOT NULL,
    phone VARCHAR(20) NOT NULL,
    team_members VARCHAR(500),
    college_name VARCHAR(100) NOT NULL,
    branch VARCHAR(50) NOT NULL,
    year VARCHAR(20) NOT NULL,
    FOREIGN KEY (event_id) REFERENCES event(id)
);

-- Create the `user` table for login and sign-up functionality
CREATE TABLE IF NOT EXISTS user (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL UNIQUE,
    password VARCHAR(200) NOT NULL
);

-- Select data from `event` and `registration` tables to verify the contents
SELECT * FROM event;
SELECT * FROM registration;
SELECT * FROM user;

-- Join query to retrieve detailed registration information with event details
SELECT
    registration.id AS registration_id,
    registration.name AS registrant_name,
    registration.phone AS registrant_phone,
    registration.team_members AS registrant_team_members,
    registration.college_name AS registrant_college_name,
    registration.branch AS registrant_branch,
    registration.year AS registrant_year,
    event.name AS event_name,
    event.address AS event_address,
    event.time AS event_time,
    event.domain AS event_domain
FROM
    registration
JOIN
    event ON registration.event_id = event.id;
>>>>>>> 38555a6eb43b674a4f3679fed755392e6279022c
