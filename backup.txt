from flask import Flask, render_template, request, redirect, url_for, session
from flask_socketio import SocketIO, join_room, leave_room, emit
from flask_bcrypt import Bcrypt
import mysql.connector

app = Flask(__name__)

app.config['SECRET_KEY'] = 'secret!'

bcrypt = Bcrypt(app)
socketio = SocketIO(app)

def get_db_connection():
    conn = mysql.connector.connect(
        host="localhost",
        user="Root",
        password="yes",
        database="event"
    )
    return conn

def execute_query(query, params=()):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute(query, params)
    conn.commit()
    cursor.close()
    conn.close()

def fetch_query(query, params=()):
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute(query, params)
    result = cursor.fetchall()
    cursor.close()
    conn.close()
    return result

@app.route('/')
def index():
    events = fetch_query("SELECT * FROM event")
    return render_template('index.html', events=events)

@app.route('/post_event', methods=['GET', 'POST'])
def post_event():
    if request.method == 'POST':
        event_name = request.form.get('name')
        address = request.form.get('address')
        date = request.form.get('date')
        time = request.form.get('time')
        phone = request.form.get('phone')
        domain = request.form.get('domain')
        max_participants = request.form.get('max_participants')

        # Save event to database
        query = """
            INSERT INTO event (name, address, date, time, phone, domain, max_participants)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
        """
        params = (event_name, address, date, time, phone, domain, max_participants)
        execute_query(query, params)
        return redirect(url_for('index'))

    return render_template('post_event.html')

@app.route('/register/<int:event_id>', methods=['GET', 'POST'])
def register(event_id):
    event = fetch_query("SELECT * FROM event WHERE id = %s", (event_id,))
    if not event:
        return "Event not found", 404
    
    if request.method == 'POST':
        name = request.form['name']
        phone = request.form['phone']
        team_members = request.form.get('team_members', '')
        college_name = request.form['college_name']
        branch = request.form['branch']
        year = request.form['year']
        if 'user_id' in session:
            user_id = session['user_id']
        else:
            return "User not logged in", 403
        
        query = """
            INSERT INTO registration (event_id, user_id, name, phone, team_members, college_name, branch, year)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """
        params = (event_id, user_id, name, phone, team_members, college_name, branch, year)
        try:
            execute_query(query, params)
        except Exception as e:
            return str(e), 500
        return redirect(url_for('event_detail', event_id=event_id))

    return render_template('register.html', event=event[0])

@app.route('/event/<int:event_id>')
def event_detail(event_id):
    event = fetch_query("SELECT * FROM event WHERE id = %s", (event_id,))
    registrations = fetch_query("SELECT * FROM registration WHERE event_id = %s", (event_id,))
    return render_template('event_detail.html', event=event[0], registrations=registrations)

@app.route('/event/<int:event_id>/chat', methods=['GET', 'POST'])
def event_chat(event_id):
    event = fetch_query("SELECT * FROM event WHERE id = %s", (event_id,))
    if 'user_id' in session:
        user = fetch_query("SELECT * FROM user WHERE id = %s", (session['user_id'],))
        username = user[0]['name']
    else:
        username = 'Guest'
    
    return render_template('chat.html', event=event[0], username=username)

@socketio.on('join')
def handle_join(data):
    username = data['username']
    event_id = data['event_id']
    room = f"event_{event_id}"
    join_room(room)
    emit('message', {'msg': f'{username} has joined the chat.'}, to=room)

@socketio.on('message')
def handle_message(data):
    event_id = data['event_id']
    room = f"event_{event_id}"
    query = """
        INSERT INTO messages (content, user_id, event_id) 
        VALUES (%s, %s, %s)
    """
    params = (data['msg'], data['user_id'], event_id)
    execute_query(query, params)
    emit('message', {'username': data['username'], 'msg': data['msg']}, to=room)

@socketio.on('leave')
def handle_leave(data):
    username = data['username']
    event_id = data['event_id']
    room = f"event_{event_id}"
    leave_room(room)
    emit('message', {'msg': f'{username} has left the chat.'}, to=room)

@app.route('/event/<int:event_id>/messages')
def get_messages(event_id):
    messages = fetch_query("SELECT * FROM messages WHERE event_id = %s", (event_id,))
    return {'messages': [{'username': fetch_query("SELECT name FROM user WHERE id = %s", (m['user_id'],))[0]['name'], 'content': m['content']} for m in messages]}

@app.route('/event/<int:event_id>/participants')
def get_participants(event_id):
    registrations = fetch_query("SELECT * FROM registration WHERE event_id = %s", (event_id,))
    return {'participants': [{'name': fetch_query("SELECT name FROM user WHERE id = %s", (r['user_id'],))[0]['name']} for r in registrations]}

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        user = fetch_query("SELECT * FROM user WHERE email = %s", (email,))
        if user and bcrypt.check_password_hash(user[0]['password'], password):
            session['user_id'] = user[0]['id']
            return redirect(url_for('index'))
        else:
            return 'Invalid email or password', 401
    return render_template('login.html')

@app.route('/sign_up', methods=['GET', 'POST'])
def sign_up():
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']
        hashed_password = bcrypt.generate_password_hash(password).decode('utf-8')
        query = """
            INSERT INTO user (name, email, password) 
            VALUES (%s, %s, %s)
        """
        params = (name, email, hashed_password)
        try:
            execute_query(query, params)
        except Exception as e:
            return str(e), 500
        return redirect(url_for('login'))
    return render_template('signup.html')

@app.route('/profile')
def profile():
    if 'user_id' not in session:
        return redirect(url_for('login'))

    user = fetch_query("SELECT * FROM user WHERE id = %s", (session['user_id'],))[0]
    upcoming_events = fetch_query("""
        SELECT * FROM event 
        WHERE date >= CURDATE() 
        AND id IN (SELECT event_id FROM registration WHERE user_id = %s)
    """, (user['id'],))
    
    past_events = fetch_query("""
        SELECT * FROM event 
        WHERE date < CURDATE() 
        AND id IN (SELECT event_id FROM registration WHERE user_id = %s)
    """, (user['id'],))

    badge = None
    registration_count = len(fetch_query("SELECT * FROM registration WHERE user_id = %s", (user['id'],)))
    if registration_count > 10:
        badge = 'gold'
    elif registration_count > 5:
        badge = 'red'

    return render_template('profile.html', user=user, upcoming_events=upcoming_events, past_events=past_events, badge=badge)

@app.route('/logout')
def logout():
    session.pop('user_id', None)
    return redirect(url_for('login'))

if __name__ == '__main__':
    socketio.run(app, debug=True)


index.hashed_password
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Event List</title>
        <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    </head>
    
<body>
    <header>
        <div class="header-left">
            <div class="user-profile">
                <a href="{{ url_for('profile') }}" class="user-profile-link">
                    <img src="{{ url_for('static', filename='user-icon.png') }}" alt="User Icon" class="user-icon">
                    <span class="username">{{ username }}</span>
                </a>
            </div>
            <h1 class="event-nest-heading">EVENT-NEST</h1>
        </div>

        <div class="header-right">
            <div class="search-bar">
                <input type="text" placeholder="Search events..." class="search-input">
                <button class="search-btn">
                    <img src="{{ url_for('static', filename='Search-icon.png') }}" alt="Search Icon">
                </button>
            </div>

            <div class="top-right-buttons">
                <a href="{{ url_for('post_event') }}" class="btn">Post a New Event</a>
                <a href="{{ url_for('sign_up') }}" class="btn">Sign Up</a>
            </div>
        </div>
    </header>

    <hr class="header-divider">

    <main>
        <div class="event-container">
            {% for event in events %}
                <div class="event-card">
                    <h2>{{ event.name }}</h2>
                    <p><strong>Address:</strong> {{ event.address }}</p>
                    <p><strong>Time:</strong> {{ event.time }}</p>
                    <p><strong>Domain:</strong> {{ event.domain }}</p>
                    <p><strong>Date:</strong> {{ event.date }}</p>
                    <div class="card-buttons">
                        <a href="{{ url_for('register', event_id=event.id) }}" class="btn register-btn">Register</a>
                        <a href="{{ url_for('event_detail', event_id=event.id) }}" class="btn go-to-event-btn">Go to Event</a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </main>
</body>
</html>

index
<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Event List</title>
        <link rel="stylesheet" href="{{ url_for('static', filename='style.css') }}">
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    </head>
    
<body>
    <header>
        <div class="header-left">
            <div class="user-profile">
                <a href="{{ url_for('profile') }}" class="user-profile-link">
                    <img src="{{ url_for('static', filename='user-icon.png') }}" alt="User Icon" class="user-icon">
                    <span class="username">{{ username }}</span>
                </a>
            </div>
            <h1 class="event-nest-heading">EVENT-NEST</h1>
        </div>

        <div class="header-right">
            <div class="search-bar">
                <input type="text" placeholder="Search events..." class="search-input">
                <button class="search-btn">
                    <img src="{{ url_for('static', filename='Search-icon.png') }}" alt="Search Icon">
                </button>
            </div>

            <div class="top-right-buttons">
                <a href="{{ url_for('post_event') }}" class="btn">Post a New Event</a>
                <a href="{{ url_for('sign_up') }}" class="btn">Sign Up</a>
            </div>
        </div>
    </header>

    <hr class="header-divider">

    <main>
        <div class="event-container">
            {% for event in events %}
                <div class="event-card">
                    <h2>{{ event.name }}</h2>
                    <p><strong>Address:</strong> {{ event.address }}</p>
                    <p><strong>Time:</strong> {{ event.time }}</p>
                    <p><strong>Domain:</strong> {{ event.domain }}</p>
                    <p><strong>Date:</strong> {{ event.date }}</p>
                    <div class="card-buttons">
                        <a href="{{ url_for('register', event_id=event.id) }}" class="btn register-btn">Register</a>
                        <a href="{{ url_for('event_detail', event_id=event.id) }}" class="btn go-to-event-btn">Go to Event</a>
                    </div>
                </div>
            {% endfor %}
        </div>
    </main>
</body>
</html>
